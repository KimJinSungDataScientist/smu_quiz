generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  STUDENT
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String
  passwordHash  String
  role          Role      @default(STUDENT)
  createdAt     DateTime  @default(now())
  submissions   Submission[]
  quizzes       Quiz[]    @relation("QuizAuthor")
}

model Quiz {
  id          String     @id @default(cuid())
  title       String
  description String?
  isPublished Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  authorId    String
  author      User       @relation("QuizAuthor", fields: [authorId], references: [id])
  questions   Question[]
  submissions Submission[]
}

model Question {
  id        String   @id @default(cuid())
  quizId    String
  quiz      Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  text      String
  options   Option[]
}

model Option {
  id         String   @id @default(cuid())
  questionId String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  text       String
  isCorrect  Boolean  @default(false)
}

model Submission {
  id        String    @id @default(cuid())
  quizId    String
  quiz      Quiz      @relation(fields: [quizId], references: [id], onDelete: Cascade)
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  score     Int
  createdAt DateTime  @default(now())
  answers   Answer[]
}

model Answer {
  id            String    @id @default(cuid())
  submissionId  String
  submission    Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  questionId    String
  question      Question  @relation(fields: [questionId], references: [id])
  optionId      String
  option        Option    @relation(fields: [optionId], references: [id])
}
